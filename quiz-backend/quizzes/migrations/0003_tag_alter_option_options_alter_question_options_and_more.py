# Generated by Django 5.2.4 on 2025-08-03 05:29

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("quizzes", "0002_manually_update_model"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("color", models.CharField(default="#3B82F6", max_length=7)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AlterModelOptions(
            name="option",
            options={"ordering": ["order", "id"]},
        ),
        migrations.AlterModelOptions(
            name="question",
            options={"ordering": ["order", "created_at"]},
        ),
        migrations.AddField(
            model_name="option",
            name="explanation",
            field=models.TextField(blank=True, help_text="Explanation for this option"),
        ),
        migrations.AddField(
            model_name="option",
            name="order",
            field=models.IntegerField(default=0, help_text="Option order"),
        ),
        migrations.AddField(
            model_name="question",
            name="audio",
            field=models.FileField(blank=True, null=True, upload_to="question_audio/"),
        ),
        migrations.AddField(
            model_name="question",
            name="blank_answers",
            field=models.JSONField(
                blank=True,
                default=list,
                help_text="Correct answers for fill in the blank",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="case_sensitive",
            field=models.BooleanField(
                default=False, help_text="Case sensitive for fill in the blank"
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="code_language",
            field=models.CharField(
                blank=True,
                help_text="Programming language for code questions",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="code_template",
            field=models.TextField(
                blank=True, help_text="Code template for code questions"
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="code_test_cases",
            field=models.JSONField(
                blank=True, default=list, help_text="Test cases for code questions"
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="explanation",
            field=models.TextField(
                blank=True, help_text="Explanation shown after answering"
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="image",
            field=models.ImageField(
                blank=True, null=True, upload_to="question_images/"
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="is_required",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="question",
            name="match_pairs",
            field=models.JSONField(
                blank=True,
                default=list,
                help_text="Pairs for match the following questions",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="order",
            field=models.IntegerField(default=0, help_text="Question order in quiz"),
        ),
        migrations.AddField(
            model_name="question",
            name="points",
            field=models.IntegerField(
                default=1, help_text="Points awarded for correct answer"
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="video",
            field=models.FileField(blank=True, null=True, upload_to="question_video/"),
        ),
        migrations.AddField(
            model_name="question",
            name="video_url",
            field=models.URLField(blank=True, help_text="YouTube/Vimeo video URL"),
        ),
        migrations.AddField(
            model_name="quiz",
            name="allow_backtracking",
            field=models.BooleanField(
                default=False, help_text="Allow users to go back to previous questions"
            ),
        ),
        migrations.AddField(
            model_name="quiz",
            name="cover_image",
            field=models.ImageField(blank=True, null=True, upload_to="quiz_covers/"),
        ),
        migrations.AddField(
            model_name="quiz",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_quizzes",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="quiz",
            name="enable_proctoring",
            field=models.BooleanField(
                default=False, help_text="Enable basic proctoring features"
            ),
        ),
        migrations.AddField(
            model_name="quiz",
            name="instructions_file",
            field=models.FileField(
                blank=True, null=True, upload_to="quiz_instructions/"
            ),
        ),
        migrations.AddField(
            model_name="quiz",
            name="max_attempts",
            field=models.IntegerField(
                default=1, help_text="Maximum attempts allowed per user"
            ),
        ),
        migrations.AddField(
            model_name="quiz",
            name="passing_score",
            field=models.IntegerField(
                default=70, help_text="Minimum score to pass (percentage)"
            ),
        ),
        migrations.AddField(
            model_name="quiz",
            name="published_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="quiz",
            name="require_fullscreen",
            field=models.BooleanField(
                default=False, help_text="Require fullscreen mode during quiz"
            ),
        ),
        migrations.AddField(
            model_name="quiz",
            name="show_correct_answers",
            field=models.BooleanField(
                default=True, help_text="Show correct answers after submission"
            ),
        ),
        migrations.AddField(
            model_name="quiz",
            name="shuffle_questions",
            field=models.BooleanField(
                default=False, help_text="Randomize question order"
            ),
        ),
        migrations.AddField(
            model_name="quiz",
            name="status",
            field=models.CharField(
                choices=[
                    ("draft", "Draft"),
                    ("published", "Published"),
                    ("archived", "Archived"),
                ],
                default="draft",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="quiz",
            name="time_limit",
            field=models.IntegerField(default=30, help_text="Time limit in minutes"),
        ),
        migrations.AlterField(
            model_name="question",
            name="question_type",
            field=models.CharField(
                choices=[
                    ("multiple-choice", "Multiple Choice"),
                    ("checkbox", "Checkbox (Multiple Answers)"),
                    ("text-input", "Text Input (Short Answer)"),
                    ("essay", "Essay (Long Answer)"),
                    ("file-upload", "File Upload"),
                    ("true-false", "True/False"),
                    ("fill-blank", "Fill in the Blank"),
                    ("match-following", "Match the Following"),
                    ("code", "Code Question"),
                    ("audio", "Audio Question"),
                    ("video", "Video Question"),
                ],
                default="multiple-choice",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="quiz",
            name="difficulty",
            field=models.CharField(
                choices=[("easy", "Easy"), ("medium", "Medium"), ("hard", "Hard")],
                default="medium",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="quiz",
            name="duration",
            field=models.IntegerField(default=30, help_text="Duration in minutes"),
        ),
        migrations.AlterUniqueTogether(
            name="question",
            unique_together={("quiz", "order")},
        ),
        migrations.AddField(
            model_name="quiz",
            name="tags",
            field=models.ManyToManyField(
                blank=True, related_name="quizzes", to="quizzes.tag"
            ),
        ),
        migrations.CreateModel(
            name="QuizSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_id", models.UUIDField(unique=True)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("current_question", models.IntegerField(default=1)),
                (
                    "answers_saved",
                    models.JSONField(
                        default=dict, help_text="Store answers as user progresses"
                    ),
                ),
                (
                    "violations",
                    models.JSONField(
                        default=list, help_text="Track cheating violations"
                    ),
                ),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="quizzes.quiz"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "quiz", "session_id")},
            },
        ),
    ]
